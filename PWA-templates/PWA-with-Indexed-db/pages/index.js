import Head from "next/head";
import { openDB } from "idb";
import { useState } from "react";

export default function Home() {
  const [show, setShow] = useState(false);
  const [showm, setShowm] = useState(false);
  async function createDB() {
    // Using https://github.com/jakearchibald/idb
    await openDB("cookbook", 1, {
      upgrade(db, oldVersion, newVersion, transaction) {
        // Switch over the oldVersion, *without breaks*, to allow the database to be incrementally upgraded.
        switch (oldVersion) {
          case 0:
          // Placeholder to execute when database is created (oldVersion is 0)
          case 1:
            // Create a store of objects
            const store = db.createObjectStore("recipes", {
              // The `id` property of the object will be the key, and be incremented automatically
              autoIncrement: true,
              keyPath: "id",
            });
            // Create an index called `name` based on the `type` property of objects in the store
            store.createIndex("type", "type");
        }
      },
    });
    setShow(true);
    
  }
//Add data to indexedDB
  async function addData() {
    const dbName = "cookbook";
    const dbVersion = 1;

    // Open the database
    const request = indexedDB.open(dbName, dbVersion);

    request.onsuccess = function (event) {
      const db = event.target.result;

      // Continue with your code
      const cookies = {
        name: "Chocolate chips cookies",
        type: "dessert",
        cook_time_minutes: 25,
      };

      const tx = db.transaction("recipes", "readwrite");
      const store = tx.objectStore("recipes");
      store.add(cookies);

      tx.oncomplete = function () {
        console.log("Data added successfully.");
        setShowm(true);
      };

      tx.onerror = function (event) {
        console.error("Error adding data:", event.target.error);
      };
    };

    request.onerror = function (event) {
      console.error("Error opening database:", event.target.error);
    };
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div style={{ width: "50%", margin: "auto" }}>
        <h1 style={{ textAlign: "center", padding: '20px' }}> PWA app with indexedDb</h1>
        <div style={{ display: "flex", justifyContent: "space-between", padding: '20px' }}>
          <button style={{ padding: "10px" }} onClick={createDB}>
            Create DB
          </button>
          <button style={{ padding: "10px" }} onClick={addData}>
            Add Data to DB
          </button>
        </div>
        {show && <p style={{ textAlign: "center" }}> Db Created</p>}
        {showm && <p style={{ textAlign: "center" }}> added cookies data to db</p>}
        <p style={{ textAlign: "center" , padding: '20px' }}>Check indexedDb in Application storage in developer tools</p>
      </div>
    </>
  );
}
